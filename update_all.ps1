param($Name = $null)
cd $PSScriptRoot

#import-module ..\au -force

$options = @{
    Timeout = 100
    Push    = $true
    Threads = 10

    Mail = @{
        To       = 'miodrag.milic@gmail.com'
        Server   = 'smtp.gmail.com'
        UserName = 'miodrag.milic@gmail.com'
        Password = if (Test-Path $PSScriptRoot\mail_pass) { gc $PSScriptRoot\mail_pass } else { $Env:mail_pass }
        Port     = 587
        EnableSsl= $true
    }

    Gist_ID = if ($Env:gist_id) { $Env:gist_id } else { '181b18886fdd363158064baf817fa2ff' }
    Script = { param($Phase, $Info)
        if ($Phase -ne 'END') { return }

        save-runinfo
        save-gist
        git
    }

}

function save-runinfo {
    "Saving run info"
    $Info | Export-CliXML $PSScriptRoot\update_results.xml
}

function save-gist {
    "Saving to gist"
    if (!(gcm gist.bat -ea 0)) { "  Error: No gist.bat found: gem install gist"; return }

    $icon_err= 'https://cdn0.iconfinder.com/data/icons/shift-free/32/Error-128.png'
    $icon_ok= 'http://www.iconsdb.com/icons/preview/tropical-blue/ok-xxl.png'

    $log = @"
# Update-AUPackages

**Time:** $($info.startTime)  
**Packages:** [majkinetor@chocolatey](https://chocolatey.org/profiles/majkinetor)  
**Git repository:** https://github.com/majkinetor/chocolatey

This file is automatically generated by the [update_all.ps1](https://github.com/majkinetor/chocolatey/blob/master/update_all.ps1) script using the [AU module](https://github.com/majkinetor/au)."

$(
  if ($Info.error_count.total) { 
    "<img src='$icon_err' width='48'> **LAST RUN HAD $($info.error_count.total) [ERRORS](#errors) !!!**" }
  else {
    "<img src='$icon_ok' width='48'> Last run was OK" }
)

```
$($Info.stats)
$($Info.result | ft | Out-String)
```

$(
    if (!$info.error_count.total) { return }
    "## Errors`n`n"
    '```'
        $info.error_info
    '```'
)
"@

    $log | gist.bat --filename 'Update-AUPackages.md' --update $Info.Options.Gist_ID
}

function git() {
    $pushed = $Info.results | ? Pushed
    if (!$pushed) { "Git: no updates, skipping"; return }

    pushd $PSScriptRoot

    "`nExecuting git pull"
    git pull

    "Commiting updated packages to git repository"
    $pushed | % { git add $_.PackageName }
    git commit -m "UPDATE BOT: $($pushed.length) packages updated"

    "`nPushing git"
    git push
    popd
}

updateall -Name $Name -Options $options | ft
$global:updateall = Import-CliXML $PSScriptRoot\update_results.xml


